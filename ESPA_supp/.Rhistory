plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
logsplines.surv=function(t.data,
t.grid){
n=length(t.data$time)
censored.obs = t.data$time[t.data$status==0]
un.censored.obs = t.data$time[t.data$status==1]
my.penalty=log(length(un.censored.obs))
fit <- try(oldlogspline(uncensored=un.censored.obs, right=censored.obs,
lbound=0, penalty=my.penalty), silent=T)
if (is.list(fit)){
out=poldlogspline(t.grid, fit)
return(1-out)
}
else return(0)
}
for (i in 1:9){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
for (i in 1:9){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
my.shape=1; my.scale=10; my.model=1; my.censor=30
df.list <- readRDS("./simulated-data/df.list.model1_n10.rds")
my.shape=1; my.scale=10; my.model=1; my.censor=30
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
par(mfrow=c(3,3))
for (i in 1:9){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
par(mfrow=c(1,1))
#
dev.off()
my.shape=1; my.scale=10; my.model=1; my.censor=30
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
par(mfrow=c(3,3))
for (i in 1:9){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
par(mfrow=c(1,1))
for (i in 1:9){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
my.shape=1/3; my.scale=10; my.model=2; my.censor=60
df.list <- readRDS("./simulated-data/df.list.model2_n25_c60.rds")
for (i in 46:48){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, TRUE)
}
rm(list = ls())
#########################################
### Analyze runs from Models 1-4 (all in one), n=10, 30% censored
#########################################
#pdf(file="Plots/Model-all-n10-c30.pdf", pointsize=12, paper="a4r",width=0,height=0)
# Mod 1
my.shape=1; my.scale=10; my.model=1; my.censor=30;
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
par(mfrow=c(4,4))
for (i in 2:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
knitr::opts_chunk$set(echo = TRUE)
library(actuar)#     heavy tailed distributions
library(survival)
library(logspline) # Suffices to use logspline, the relevant ones in polspline are identical.
#library(polspline)
library(survPresmooth)
source("./Emp_SPA_pdf_t.R")
source("./Emp_SPA_Dist_Supp.R")
source("./Emp_SPA_Survival_t.R")
Simulate.Right.Censor.Data <- function(n,
target.cen,
my.shape,
my.scale,
model.num){
set.seed(1000)
m <- 1
df.list <- list()
while(m <= 100){# number of simulation reps
t <- rweibull(n, shape=my.shape, scale=my.scale)
if (model.num==4) t = rllogis(n, shape=my.shape)
c <- rexp(n, rate=1/my.scale)
#c <- rweibull(n, shape=my.shape, scale=my.scale) # to use the same censroing Y as T
z <- pmin(t,c)
time <- z
status <- ifelse(t<=c,1,0)
## simulate <= target censoring rate and the largest obs is censored
per.cen <- (n-sum(status))/n*100
if(per.cen > target.cen|per.cen < (target.cen-5)|(status[which(time==max(time))]==1)){next}
df.list[[m]] <- data.frame(time=time,status=status)
m=m+1
}
return(df.list)
}
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
xx=df.list[[3]]
which.order=sort(xx$time, index.return = TRUE)$ix
xx$time[which.order]
xx$status[which.order]
logsplines.surv=function(t.data,
t.grid){
n=length(t.data$time)
censored.obs = t.data$time[t.data$status==0]
un.censored.obs = t.data$time[t.data$status==1]
my.penalty=log(length(un.censored.obs))
fit <- try(oldlogspline(uncensored=un.censored.obs, right=censored.obs,
lbound=0, penalty=my.penalty), silent=T)
if (is.list(fit)){
out=poldlogspline(t.grid, fit)
return(1-out)
}
else return(0)
}
plot.surv.fits <- function(a,
b,
t.data,
model.num,
target.cen,
print.legend){
eps=10^(-4); n=length(t.data$time); blue.is.ok=TRUE
time=t.data$time; status=t.data$status
# KM fit
survob=Surv(time=time,event=status,type='right')
fit=survfit(survob~1,conf.type="plain")
# ESPA & true survivals
source('./Emp_SPA_Dist_Supp.R')
supp=Emp_SPA_Dist_Supp(time,status)
my.grid=seq(supp[1],supp[2],by=(supp[2]-supp[1])/100)
source('./Emp_SPA_Survival_t.R')
spa.surv=rep(0,length(my.grid)); tru.surv=rep(0,length(my.grid))
for(i in 1:length(my.grid)){
spa.surv[i] = Emp_SPA_Survival_t(my.grid[i],time,status)
tru.surv[i] = 1-pweibull(my.grid[i], shape=a, scale=b)
if (model.num==4) tru.surv[i] = pllogis(my.grid[i], shape=2, lower.tail=F)
}
# get logsplines surv
spl.surv=logsplines.surv(t.data, my.grid)
# flag when logsplines did NOT succeed
if (length(spl.surv)==1) blue.is.ok=FALSE
# refine grid to be above epsilon
new.idx=seq(1,length(my.grid))[tru.surv>eps];
my.grid=my.grid[new.idx]; t.upper=max(my.grid)
spa.surv=spa.surv[new.idx]
tru.surv=tru.surv[new.idx]
if (blue.is.ok) spl.surv=spl.surv[new.idx]
# plot KM and overlay remianing ones
plot(fit,lty=c(1,3,3),main='',xlab="time",conf.int=T, ylab="",
yaxs="i",lwd=2,xlim=c(0,t.upper), col=c("grey","grey","grey"))
points(my.grid,spa.surv,lwd=2,type='l',col='red',lty=2)
points(my.grid,tru.surv,lwd=2,type='l',col='black',lty=1)
if (blue.is.ok) points(my.grid,spl.surv,lwd=2,type='l',col='blue',lty=2)
if (print.legend) legend('topright',legend=c('KM','ESPA','true','Logsplines'),
col=c("grey",'red','black','blue'), lty=c(1,2,1,2))
title(main=bquote(paste('Survival: Model ',.(model.num),', n=',.(n),
', (',.(target.cen),'% censor)')))
}
#########################################
### Analyze runs from Models 1-4 (all in one), n=10, 30% censored
#########################################
#pdf(file="Plots/Model-all-n10-c30.pdf", pointsize=12, paper="a4r",width=0,height=0)
# Mod 1
my.shape=1; my.scale=10; my.model=1; my.censor=30;
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
par(mfrow=c(4,4))
for (i in 2:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
par(mfrow=c(1,1))
pdf(file="Plots/Model-all-n10-c30.pdf", pointsize=12, paper="a4r",width=0,height=0)
# Mod 1
my.shape=1; my.scale=10; my.model=1; my.censor=30;
df.list <- readRDS("./simulated-data/df.list.model1_n10_c30.rds")
par(mfrow=c(4,4))
for (i in 1:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
# Mod 2
my.shape=1/3; my.scale=10; my.model=2;
df.list <- readRDS("./simulated-data/df.list.model2_n10_c30.rds")
for (i in 1:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
# Mod 3
my.shape=2; my.scale=sqrt(2/3); my.model=3;
df.list <- readRDS("./simulated-data/df.list.model3_n10_c30.rds")
for (i in 1:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
# Mod 4
my.shape=2; my.scale=1; my.model=4;
df.list <- readRDS("./simulated-data/df.list.model4_n10_c30.rds")
for (i in 1:4){
plot.surv.fits(my.shape, my.scale, df.list[[i]], my.model, my.censor, FALSE)
}
par(mfrow=c(1,1))
#
dev.off()
load("ISEs/Model1-ISEs.RData")
rm(list = ls())
load("ISEs/Model1-ISEs.RData")
Compute.Model.ISEs <- function(df.list,
my.shape,
my.scale,
model.num){
source('./Emp_SPA_Dist_Supp.R')
source('./Emp_SPA_Survival_t.R')
#   true survival function
t.fun=function(t,shape,scale) 1-pweibull(t,shape=shape,scale=scale)
if (model.num==4){
t.fun=function(t,shape,scale) pllogis(t, shape=shape, lower.tail=F)
}
#   squared error of ESPA survival function
sq.error.spa=function(x,time,status){
len.x=length(x); sq.error=numeric(0)
for(i in 1:len.x){
true.den=t.fun(x[i],my.shape,my.scale)
saddle.den=Emp_SPA_Survival_t(x[i],time,status)
sq.error[i]=(true.den-saddle.den)^2
}
return(sq.error)
}
#   squared error of spline survival function
sq.error.spl=function(x,time,status){
true.den=t.fun(x,my.shape,my.scale); len.x=length(x)
censored.obs = time[status==0]; un.censored.obs = time[status==1]
my.penalty=log(length(un.censored.obs))
fit <- try(oldlogspline(uncensored=un.censored.obs, right=censored.obs,
lbound=0, penalty=my.penalty), silent=T)
if (is.list(fit)){
spline.den=1-poldlogspline(x, fit)
out=(true.den-spline.den)^2
} else out=rep(NA,len.x)
return(out)
}
#   squared error KM
sq.error.km=function(x,time,status){
true.den=t.fun(x,my.shape,my.scale); len.x=length(x)
survob=Surv(time=time,event=status,type='right')
fit=survfit(survob~1,conf.type="plain")
fit.km <- stepfun(fit$time, c(1, fit$surv))
km.den=fit.km(x)
out=(true.den-km.den)^2
return(out)
}
#   Compute ISEs
m=length(df.list); ise.spa=rep(0,m); ise.spl=rep(0,m); ise.km=rep(0,m);
for (i in 1:m){
t.data = df.list[[i]]
time = t.data$time; status=t.data$status
supp = Emp_SPA_Dist_Supp(time,status);
if(supp[1]==0){
supp[1] = supp[1]+.01
}
ise.spa[i] = tryCatch(integrate(sq.error.spa, supp[1], supp[2], time=time, status=status, abs.tol=.1)$value, error=function(e) NA)
if (is.na(ise.spa[i])){
ise.spa[i]=tryCatch(integrate(sq.error.spa, supp[1], supp[2], time=time, status=status, abs.tol=.2)$value, error=function(e) NA)
}
ise.spl[i]=tryCatch(integrate(sq.error.spl, supp[1], supp[2], time=time, status=status, abs.tol=.1)$value, error=function(e) NA)
ise.km[i]=tryCatch(integrate(sq.error.km, supp[1], supp[2], time=time, status=status, abs.tol=.1)$value, error=function(e) NA)
}
out=data.frame(espa=ise.spa,spline=ise.spl,km=ise.km)
return(out)
}
Get.Box.Pdf.Plots <- function(b.dat, my.label){
case1=FALSE; case2=FALSE; case3=FALSE;
idx=which(is.na(b.dat$spline)); m=dim(b.dat)[1]; my.title.size=13
if (length(idx)==0) case3=TRUE # no NA's -> plot espa & splines separately
if (length(idx)==m) case1=TRUE # all NA's -> plot only espa
if (length(idx)>0 && length(idx)<m) case2=TRUE # some NA's -> plot difference
if (case1){
#    my.label=paste(my.label,": \n 100% of spline method had no solution")
ise=log(b.dat$espa)
Method=factor(rep("espa",m))
df2=data.frame(Method, ise)
bg2 <- ggplot(df2, aes(Method, ise))
bg2 <- bg2 + geom_boxplot(aes(fill = Method)) +
xlab("") + ylab("") + ggtitle(my.label)
bg2 <- bg2 + scale_fill_manual(values="#E69F00")
dg2 <- ggplot(df2, aes(x=ise,colour=Method,group=Method))
dg2 <- dg2 + xlab("log(ISE)") + geom_density(fill="#E69F00")+ylab("")
dg2 <- dg2 + scale_color_manual(values="#E69F00") + ggtitle(my.label)+
theme(plot.title = element_text(size=my.title.size, face = "bold"))
}
if (case2){
b.dat=b.dat[-idx,]; m=dim(b.dat)[1]; my.per=100-m
#    my.label=paste(my.label,": \n ",my.per,"% of spline method had no solution")
ise=log(b.dat$spline)-log(b.dat$espa)
Method=factor(rep("Difference \n (spline-espa)",m))
df2=data.frame(Method, ise)
bg2 <- ggplot(df2, aes(Method, ise))
bg2 <- bg2 + geom_boxplot(aes(fill = Method)) +
xlab("") + ylab("") + ggtitle(my.label)
bg2 <- bg2 + scale_fill_manual(values="#56B4E9")
dg2 <- ggplot(df2, aes(x=ise, colour=Method, group=Method))
dg2 <- dg2 + xlab("log(ISE)") + geom_density(fill="#56B4E9")+ylab("")
dg2 <- dg2 + scale_color_manual(values="#56B4E9")+ ggtitle(my.label)+
theme(plot.title = element_text(size=my.title.size, face = "bold"))
}
if (case3){
ise=log(c(b.dat$espa,b.dat$spline))
Method=factor(c(rep("espa",m),rep("spline",m)))
df2=data.frame(Method, ise)
bg2 <- ggplot(df2, aes(Method, ise))
bg2 <- bg2 + geom_boxplot(aes(fill = Method)) +
xlab("") + ylab("") + ggtitle(my.label)
dg2 <- ggplot(df2, aes(x=ise, colour=Method, group=Method, linetype=Method))
dg2 <- dg2 + xlab("log(ISE)") + geom_density(fill=NA)+ ggtitle(my.label)+
theme(plot.title = element_text(size=my.title.size, face = "bold"))+ylab("")
}
out=list("box"=bg2, "den"=dg2)
return(out)
}
load(file="Model1-ISEs.RData")
load(file="./ISEs/Model1-ISEs.RData")
load(file="./ISEs/Model1-ISEs.RData")
c(mean(log(ise.mod1.n10.c30$espa)),var(log(ise.mod1.n10.c30$espa))^0.5/10)
c(mean(log(ise.mod1.n10.c60$espa)),var(log(ise.mod1.n10.c60$espa))^0.5/10)
c(mean(log(ise.mod1.n10.c30$km)),var(log(ise.mod1.n10.c30$km))^0.5/10)
c(mean(log(ise.mod1.n10.c60$km)),var(log(ise.mod1.n10.c60$km))^0.5/10)
c(mean(log(ise.mod1.n25.c30$espa)), mean(log(ise.mod1.n25.c30$spline)), mean(log(ise.mod1.n25.c30$km)))
c(var(log(ise.mod1.n25.c30$espa))^0.5/10, var(log(ise.mod1.n25.c30$spline))^0.5/10, var(log(ise.mod1.n25.c30$km))^0.5/10)
c(mean(log(ise.mod1.n25.c60$espa)), mean(log(ise.mod1.n25.c60$spline)), mean(log(ise.mod1.n25.c60$km)))
c(var(log(ise.mod1.n25.c60$espa))^0.5/10, var(log(ise.mod1.n25.c60$spline))^0.5/10, var(log(ise.mod1.n25.c60$km))^0.5/10)
### Model 1: for n=100 and c=60 spline had no solution in 3 reps
c(mean(log(ise.mod1.n100.c30$espa)), var(log(ise.mod1.n100.c30$espa))^0.5/10)
c(mean(log(ise.mod1.n100.c60$km)), var(log(ise.mod1.n100.c60$km))^0.5/10)
my.mod.ise=ise.mod1.n100.c60;
x=log(my.mod.ise$spline); my.idx=!is.na(x); m=sum(my.idx);
c(mean(log(my.mod.ise$espa[my.idx])), mean(log(my.mod.ise$spline[my.idx])))
c(var(log(my.mod.ise$espa[my.idx]))^0.5/sqrt(m), var(log(my.mod.ise$spline[my.idx]))^0.5/sqrt(m))
### Model 4: n=10 only espa had solution.
load(file="./ISEs/Model4-ISEs.RData")
c(mean(log(ise.mod4.n10.c30$espa)),var(log(ise.mod4.n10.c30$espa))^0.5/10)
c(mean(log(ise.mod4.n10.c60$espa)),var(log(ise.mod4.n10.c60$espa))^0.5/10)
c(mean(log(ise.mod4.n10.c30$km)),var(log(ise.mod4.n10.c30$km))^0.5/10)
c(mean(log(ise.mod4.n10.c60$km)),var(log(ise.mod4.n10.c60$km))^0.5/10)
c(mean(log(ise.mod4.n25.c30$espa)), mean(log(ise.mod4.n25.c30$spline)), mean(log(ise.mod4.n25.c30$km)))
c(var(log(ise.mod4.n25.c30$espa))^0.5/10, var(log(ise.mod4.n25.c30$spline))^0.5/10, var(log(ise.mod4.n25.c30$km))^0.5/10)
c(mean(log(ise.mod4.n25.c60$espa)), mean(log(ise.mod4.n25.c60$spline)), mean(log(ise.mod4.n25.c60$km)))
c(var(log(ise.mod4.n25.c60$espa))^0.5/10, var(log(ise.mod4.n25.c60$spline))^0.5/10, var(log(ise.mod4.n25.c60$km))^0.5/10)
#
### Model 4: n=100 (m=87 for c=30, m=94 for c=60)
my.mod.ise=ise.mod4.n100.c60;
x=log(my.mod.ise$spline); my.idx=!is.na(x); m=sum(my.idx);
c(mean(log(my.mod.ise$espa[my.idx])), mean(log(my.mod.ise$spline[my.idx])), mean(log(my.mod.ise$km[my.idx])))
c(var(log(my.mod.ise$espa[my.idx]))^0.5/sqrt(m), var(log(my.mod.ise$spline[my.idx]))^0.5/sqrt(m), var(log(my.mod.ise$km[my.idx]))^0.5/sqrt(m))
x <- citation("asaur")
x <- citation("survival")
toBibtex(x)
aml
d1=aml[1:11,]
time1=d1[,1]
status1=d1[,2]
### KM
survob=Surv(time=time1,event=status1)
fit1=survfit(survob~1, conf.type="none") #conf.type="plain" for 95% CI
source('./Emp_SPA_Dist_Supp.R')
supp1=Emp_SPA_Dist_Supp(time1,status1)
supp1=Emp_SPA_Dist_Supp(time1,status1)
t.grid1=seq(supp1[1],supp1[2],by=.1)
### ESPA
source('./Emp_SPA_Survival_t.R')
saddle.sur1=rep(0,length(t.grid1))
for(i in 1:length(t.grid1)){
saddle.sur1[i]=Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
for(i in 1:length(t.grid1)){
saddle.sur1[i]=Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
NaInd1=which(is.na(saddle.sur1))
t.grid1=t.grid1[-NaInd1]
saddle.sur1=saddle.sur1[-NaInd1]
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
points(t.grid1,saddle.sur1,type='l',lwd=my.lwd,col='blue',lty=2)
my.lwd=2
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
points(t.grid1,saddle.sur1,type='l',lwd=my.lwd,col='blue',lty=2)
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
points(t.grid1,saddle.sur1,type='l',lwd=my.lwd,col='blue',lty=2)
plot(t.grid1,saddle.sur1,type='l',lwd=my.lwd,col='blue',lty=2)
saddle.sur1
saddle.sur1=rep(0,length(t.grid1))
for(i in 1:length(t.grid1)){
saddle.sur1[i]=Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
d1=aml[1:11,]
time1=d1[,1]
status1=d1[,2]
### KM
survob=Surv(time=time1,event=status1)
fit1=survfit(survob~1, conf.type="none") #conf.type="plain" for 95% CI
source('./Emp_SPA_Dist_Supp.R')
supp1=Emp_SPA_Dist_Supp(time1,status1)
supp1
t.grid1=seq(supp1[1],supp1[2],by=.1)
### ESPA
source('./Emp_SPA_Survival_t.R')
saddle.sur1 = rep(0,length(t.grid1))
for(i in 1:length(t.grid1)){
saddle.sur1[i] = Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
which(is.na(saddle.sur1))
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
points(t.grid1,saddle.sur1,type='l',lwd=my.lwd,col='blue',lty=2)
d=ovarian
time=d$futime; status=d$fustat; #n=length(time)
survob=Surv(time=time,event=status,type='right')
fit=survfit(survob~1,conf.type="none")
source('./Emp_SPA_Dist_Supp.R')
supp=Emp_SPA_Dist_Supp(time,status)
supp=Emp_SPA_Dist_Supp(time,status)
t.grid=seq(supp[1],supp[2],by=1)
### ESPA
source('./Emp_SPA_Survival_t.R')
saddle.sur=rep(0,length(t.grid))
supp
saddle.sur=rep(0,length(t.grid))
for(i in 1:length(t.grid)){
saddle.sur[i]=Emp_SPA_Survival_t(t.grid[i],time,status,inc=.1)
}
which(is.na(saddle.sur))
plot(fit,lty=c(1,3,3),main='ovarian (n=26)',xlab="time",
conf.int=T, ylab="", yaxs="i", lwd=my.lwd, xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid,saddle.sur,lwd=my.lwd,type='l',col='blue',lty=2)
d=gastricXelox
library(asaur)
install.packages("asaur")
d = gastricXelox
library(asaur)
d = gastricXelox
time=d$timeWeeks; status=d$delta; #n=length(time)
survob=Surv(time=time,event=status,type='right')
fit=survfit(survob~1,conf.type="none")
source('./Emp_SPA_Dist_Supp.R')
supp=Emp_SPA_Dist_Supp(time,status)
t.grid=seq(supp[1],supp[2],by=1)
t.grid
### ESPA
source('./Emp_SPA_Survival_t.R')
saddle.sur=rep(0,length(t.grid))
supp
for(i in 1:length(t.grid)){
saddle.sur[i]=Emp_SPA_Survival_t(t.grid[i],time,status,inc=.1)
}
which(is.na(saddle.sur))
plot(fit,lty=c(1,3,3),main='gastricXelox (n=48)',xlab="time",
conf.int=T, ylab="",yaxs="i",lwd=my.lwd,xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid.spa,saddle.sur,lwd=my.lwd,type='l',col='blue',lty=2)
points(t.grid,spline.sur,lwd=my.lwd,type='l',col='purple',lty=4)
### SPLINE
censored.obs = time[status==0]
un.censored.obs = time[status==1]
my.penalty = log(length(un.censored.obs))
fit.spl <- oldlogspline(uncensored=un.censored.obs, right=censored.obs,
lbound=0, penalty=my.penalty)
plot(fit,lty=c(1,3,3),main='gastricXelox (n=48)',xlab="time",
conf.int=T, ylab="",yaxs="i",lwd=my.lwd,xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid.spa,saddle.sur,lwd=my.lwd,type='l',col='blue',lty=2)
plot(fit,lty=c(1,3,3),main='gastricXelox (n=48)',xlab="time",
conf.int=T, ylab="",yaxs="i",lwd=my.lwd,xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid, saddle.sur, lwd=my.lwd, type='l', col='blue', lty=2)
d=genfan
time=d$hours; status=d$status;
survob=Surv(time=time,event=status,type='right')
fit=survfit(survob~1,conf.type="none")
source('./Emp_SPA_Dist_Supp.R')
supp=Emp_SPA_Dist_Supp(time,status)
supp=Emp_SPA_Dist_Supp(time,status)
t.grid=seq(supp[1],supp[2],by=1)
### SPLINE
censored.obs = time[status==0]
un.censored.obs = time[status==1]
my.penalty=log(length(un.censored.obs))
fit.spl <- oldlogspline(uncensored=un.censored.obs, right=censored.obs,
lbound=0, penalty=my.penalty)
spline.sur=1-poldlogspline(t.grid, fit.spl)
### ESPA
source('./Emp_SPA_Survival_t.R')
saddle.sur=rep(0,length(t.grid))
for(i in 1:length(t.grid)){
saddle.sur[i]=Emp_SPA_Survival_t(t.grid[i],time,status,inc=.1)
}
which(is.na(saddle.sur))
plot(fit,lty=c(1,3,3),main='genfan (n=70)',xlab="time",
conf.int=T, ylab="",yaxs="i",lwd=my.lwd,xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid,saddle.sur,lwd=my.lwd,type='l',col='blue',lty=2)
plot(fit,lty=c(1,3,3),main='genfan (n=70)',xlab="time",
conf.int=T, ylab="",yaxs="i",lwd=my.lwd,xlim=c(supp[1],supp[2]), col=c("black","grey","grey"))
points(t.grid,saddle.sur,lwd=my.lwd,type='l',col='blue',lty=2)
points(t.grid,spline.sur,lwd=my.lwd,type='l',col='purple',lty=4)
legend('bottomleft',legend=c('Kaplan-Meier','ESPA','SPLINE'),lwd=my.lwd,
col=c('black','blue','purple'), lty=c(1,2,4))
d1=aml[1:11,]
time1=d1[,1]
status1=d1[,2]
### KM
survob=Surv(time=time1,event=status1)
fit1=survfit(survob~1, conf.type="none") #conf.type="plain" for 95% CI
### ESPA
source('./Emp_SPA_Dist_Supp.R')
supp1=Emp_SPA_Dist_Supp(time1,status1)
t.grid1 = seq(supp1[1],supp1[2],by=.1)
source('./Emp_SPA_Survival_t.R')
saddle.sur1 = rep(0,length(t.grid1))
for(i in 1:length(t.grid1)){
saddle.sur1[i] = Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
for(i in 1:length(t.grid1)){
saddle.sur1[i] = Emp_SPA_Survival_t(t.grid1[i],time1,status1,inc=.1)
}
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
plot(fit1,xlab="time", ylab="", main="Survival Function: aml (n=11)",lty=c(1,3,3), conf.int=T, yaxs="i", lwd=my.lwd, xlim=c(supp1[1],supp1[2]), col=c("black","grey","grey"))
points(t.grid1, saddle.sur1, type='l', lwd=my.lwd, col='blue', lty=2)
